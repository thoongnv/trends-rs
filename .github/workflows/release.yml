name: Release

on:
  push:
    tags:
      - '*'
    branches:
      - master

jobs:
  release:
    name: Release
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        build: [linux, linux-arm, macos, macos-arm]
        include:
        - build: linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
        - build: linux-arm
          os: ubuntu-latest
          rust: stable
          target: aarch64-unknown-linux-gnu
        - build: macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
        - build: macos-arm
          os: ubuntu-20.04
          rust: stable
          target: aarch64-apple-darwin
        # - build: windows
        #   os: windows-latest
        #   rust: stable
        #   target: x86_64-pc-windows-msvc
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: Login to GitHub Container Registry
      if: matrix.build == 'macos-arm' || matrix.build == 'windows-arm'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GH_REGISTRY_TOKEN }}

    - name: Use Cross
      shell: bash
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/${{ matrix.target }}/release/strend"

    - name: Build archive
      shell: bash
      run: |
        staging="strend-${{ github.ref_name }}-${{ matrix.target }}"
        mkdir -p "$staging"

        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp "target/${{ matrix.target }}/release/strend" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          cp "target/${{ matrix.target }}/release/strend" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

    - name: Publish
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.ASSET }}

  cargo-publish:
    name: Cargo publish
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: Publish
      shell: bash
      # Only publish if tag is newer than current crate version
      run: |
        latest_version=$(cargo search strend | cut -d "#" -f 1 | cut -d "=" -f 2 | sed -e 's/^[[:space:]]*//' | xargs)
        if [ "$latest_version" != "${{ github.ref_name }}" ]; then
          cargo publish
        fi
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  homebrew:
    name: Bump Homebrew formula
    runs-on: macos-latest
    steps:
      - name: Update Homebrew formula
        if: startsWith(github.ref, 'refs/tags/')
        uses: dawidd6/action-homebrew-bump-formula@v3
        with:
          tap: thoongnv/homebrew-strend
          token: ${{ secrets.HOMEBREW_BUMP_TOKEN }}
          formula: strend

  deb-publish:
    name: Publish deb package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: Install cargo-deb
        run: cargo install cargo-deb
      - name: Build deb package
        shell: bash
        run: |
          cargo deb
          mv target/debian/strend_${{ github.ref_name }}_amd64.deb target/debian/strend-${{ github.ref_name }}-x86_64.deb
      - name: Releasing assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/debian/strend-${{ github.ref_name }}-x86_64.deb

  rpm-publish:
    name: Publish rpm package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: Use Cross
        run: cargo install cross
      - name: Use cargo-generate-rpm
        run: cargo install cargo-generate-rpm
      - name: Build release binary
        run: cross build --release --target x86_64-unknown-linux-musl
      - name: Build rpm package
        shell: bash
        # Statically links against MUSL libc: https://stackoverflow.com/questions/63724484/build-and-bind-against-older-libc-version
        run: |
          mkdir -p target/centos
          cargo generate-rpm --target x86_64-unknown-linux-musl -o target/centos --auto-req disabled
          mv target/centos/strend-${{ github.ref_name }}*.rpm target/centos/strend-${{ github.ref_name }}-x86_64.rpm
      - name: Releasing assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/centos/strend-${{ github.ref_name }}-x86_64.rpm